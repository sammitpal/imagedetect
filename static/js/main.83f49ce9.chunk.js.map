{"version":3,"sources":["components/FaceRecognition/FaceRecognition.js","components/ImageLinkForm/ImageLinkForm.js","App.js","serviceWorker.js","index.js"],"names":["FaceRecognition","imageUrl","className","id","src","alt","width","height","ImageLinkForm","onInputChange","onButtonSubmit","type","onChange","placeholder","onClick","app","Clarifai","App","apiKey","calculateFaceLocation","data","clarifaiFace","outputs","regions","region_info","bounding_box","image","document","getElementById","Number","leftCol","left_col","topRow","top_row","rightCol","right_col","bottomRow","bottom_row","displayFaceBox","box","setState","event","input","target","value","state","models","predict","FACE_DETECT_MODEL","then","response","catch","err","console","log","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"qUAaeA,G,MAXS,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACvB,OACI,yBAAKC,UAAY,aACb,6BAAK,6BACL,yBAAKA,UAAY,gBACb,yBAAKC,GAAK,aAAaC,IAAOH,EAAUI,IAAK,GAAGC,MAAQ,QAAQC,OAAS,aCY1EC,G,OAjBO,SAAC,GAAuC,IAArCC,EAAoC,EAApCA,cAAgBC,EAAoB,EAApBA,eACrC,OACI,6BACI,wBAAIR,UAAY,UAAhB,uBACA,uBAAGA,UAAY,MACV,gEAEL,yBAAKA,UAAY,UACb,2BAAOS,KAAO,OAAOT,UAAY,sBAAsBU,SAAYH,EAAgBI,YAAc,uBACjG,4BAAQX,UAAY,0DAA0DY,QAAWJ,GAAzF,aAGJ,+CCPNK,EAAM,IAAIC,IAASC,IAAI,CAC5BC,OAAQ,qCAgDMD,E,kDA5Cb,aACC,IAAD,8BACE,gBAOFE,sBAAwB,SAACC,GACvB,IAAMC,EAAeD,EAAKE,QAAQ,GAAGF,KAAKG,QAAQ,GAAGC,YAAYC,aAC3DC,EAAQC,SAASC,eAAe,cAChCtB,EAAQuB,OAAOH,EAAMpB,OACrBC,EAASsB,OAAOH,EAAMnB,QAC5B,MAAO,CACLuB,QAAST,EAAaU,SAAWzB,EACjC0B,OAAQX,EAAaY,QAAU1B,EAC/B2B,SAAU5B,EAASe,EAAac,UAAY7B,EAC5C8B,UAAW7B,EAAUc,EAAagB,WAAa9B,IAjBnD,EAoBA+B,eAAiB,SAACC,GAChB,EAAKC,SAAS,CAACD,IAAKA,KArBtB,EAuBA9B,cAAgB,SAACgC,GACf,EAAKD,SAAS,CAACE,MAAOD,EAAME,OAAOC,SAxBrC,EA0BAlC,eAAiB,WACf,EAAK8B,SAAS,CAACvC,SAAU,EAAK4C,MAAMH,QACpC3B,EAAI+B,OACHC,QAAQ/B,IAASgC,kBAAmB,EAAKH,MAAMH,OAC/CO,MAAK,SAAAC,GAAQ,OAAI,EAAK/B,sBAAsB+B,MAC5CC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,OA7B1B,EAAKP,MAAM,CACTH,MAAO,GACPzC,SAAU,GACVsC,IAAK,IALT,E,qDAkCE,OACE,yBAAKrC,UAAU,OACb,kBAAC,EAAD,CAAeO,cAAe8C,KAAK9C,cAAeC,eAAgB6C,KAAK7C,iBACvE,kBAAC,EAAD,CAAiBT,SAAUsD,KAAKV,MAAM5C,gB,GAvC5BuD,a,OCCEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFrC,SAASC,eAAe,SDwHpB,kBAAmBqC,WACrBA,UAAUC,cAAcC,MACrBlB,MAAK,SAAAmB,GACJA,EAAaC,gBAEdlB,OAAM,SAAAmB,GACLjB,QAAQiB,MAAMA,EAAMC,c","file":"static/js/main.83f49ce9.chunk.js","sourcesContent":["import React from 'react';\r\nimport { findByLabelText } from '@testing-library/react';\r\nconst FaceRecognition = ( {imageUrl} ) => {\r\n    return(\r\n        <div className = \"center ma\">\r\n            <br/><br/>\r\n            <div className = \"absolute mt2\">\r\n                <img id = 'inputimage' src = {imageUrl} alt ='' width = \"250px\" height = \"auto\"/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default FaceRecognition;","import React from 'react';\r\nimport './ImageLinkForm.css';\r\nconst ImageLinkForm = ({ onInputChange , onButtonSubmit}) => {\r\n    return(\r\n        <div>\r\n            <h1 className = \"center\">IMAGE DETECTION APP</h1>\r\n            <p className = \"f3\">\r\n                {'You need to enter url of any images, it will fetch the image'}\r\n            </p>\r\n            <div className = \"center\">\r\n                <input type = \"text\" className = \"pl0 f4 pa2 w-70 br3\" onChange = {onInputChange}  placeholder = \"Enter URL of Image\"/>\r\n                <button className = \"pr0 w-30 grow f4 link ph3 pv2 dib white bg-light-purple\" onClick = {onButtonSubmit}> Detect </button>\r\n            </div>\r\n\r\n            <p>By Sammit Pal</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ImageLinkForm;","import React, { Component } from 'react';\nimport './App.css';\nimport Clarifai from 'clarifai';\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition';\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm';\nimport { render } from '@testing-library/react';\n\nconst app = new Clarifai.App({\n apiKey: 'af6fa92815494a5da8d0db40eb1a9266'\n});\n\nclass App extends Component {\n  constructor()\n  {\n    super();\n    this.state={\n      input: '',\n      imageUrl: '',\n      box: {}\n    }\n  }\n  calculateFaceLocation = (data) => {\n    const clarifaiFace = data.outputs[0].data.regions[0].region_info.bounding_box;\n    const image = document.getElementById('inputimage');\n    const width = Number(image.width);\n    const height = Number(image.height);\n    return {\n      leftCol: clarifaiFace.left_col * width,\n      topRow: clarifaiFace.top_row * height,\n      rightCol: width - (clarifaiFace.right_col * width),\n      bottomRow: height - (clarifaiFace.bottom_row * height)\n    }\n  }\n  displayFaceBox = (box)  => {\n    this.setState({box: box});\n  }\n  onInputChange = (event) =>{\n    this.setState({input: event.target.value});\n  }\n  onButtonSubmit = () =>{\n    this.setState({imageUrl: this.state.input})\n    app.models\n    .predict(Clarifai.FACE_DETECT_MODEL, this.state.input)\n    .then(response => this.calculateFaceLocation(response))\n    .catch(err => console.log(err));\n  }\n  render(){\n    return (\n      <div className=\"App\">\n        <ImageLinkForm onInputChange={this.onInputChange} onButtonSubmit={this.onButtonSubmit}/>\n        <FaceRecognition imageUrl={this.state.imageUrl}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}